#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: mt7981_21.02

permissions: write-all
# 开启写权限，防止无法上传到release

on:
  workflow_dispatch:
    inputs:
      USE_URL:
        description: '使用源码 hanwckf/padavanonly'
        required: true
        default: 'padavanonly'
        type: choice
        options:
        - hanwckf
        - padavanonly
      Default_eeprom:
        description: 'eeprom文件 360t7/nx30pro/off'  #off不使用高功率eeprom
        required: true
        default: '360t7_eeprom' 
        type: choice
        options:
        - 360t7_eeprom
        - nx30pro_eeprom
        - off_false
      USE_WIFI:
        description: '修改默认WIFI名'
        required: true
        default: 'Mediatek'
      USE_MTWIFI_CFG:
        description: '使用 Openwrt原生无线界面'
        required: true
        default: true
        type: boolean     
      USE_IPK:
        description: '修改 IPK插件布局'
        required: true
        default: true
        type: boolean
      USE_52MHZ:
        description: '使用 52MHz闪存频率'
        required: true
        default: false
        type: boolean
      USE_MEMORY_SHRINK:
        description: 'MTK内存优化 512M推荐关闭'
        required: true
        default: true
        type: boolean
      USE_DOCKER:
        description: '添加 docker容器'
        required: true
        default: false
        type: boolean

env:
  REPO_URL: https://github.com/${{inputs.USE_URL}}/immortalwrt-mt798x
  #REPO_URL: https://github.com/padavanonly/immortalwrt-mt798x
  FREE_DISK_SH: scripts/free_disk_space.sh
  PLUGINS_SH: scripts/Plugins.sh
  ENV_SH: scripts/environment.sh
  DIY_SH: scripts/diy.sh
  CLASH_CORE: scripts/preset-clash-core.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  USE_WIFI: ${{inputs.USE_WIFI}}
  Default_eeprom: ${{inputs.Default_eeprom}}
  MODIFY_WIFI: true

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 检查
      uses: actions/checkout@main

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        export WRT_SOURCE=$(echo $REPO_URL | cut -d '/' -f 4)
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
        echo "WRT_SOURCE=$WRT_SOURCE" >> $GITHUB_ENV

        echo "USE_MEMORY_SHRINK=${{ github.event.inputs.USE_MEMORY_SHRINK }}" >> $GITHUB_ENV
        echo "USE_IPK=${{ github.event.inputs.USE_IPK }}" >> $GITHUB_ENV
                
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        chmod +x $ENV_SH && $ENV_SH
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 检查空间使用情况
      if: (!cancelled())
      run: |
          echo "======================="
          lscpu | egrep "name|Core|Thread"
          echo "======================="
          df -hT
          echo "======================="
          du -h --max-depth=1
          echo "======================="

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 开启缓存
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'openwrt21-cortexa53'
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新 & 安装 feeds & 执行脚本
      run: |
        cd openwrt
        ./scripts/feeds update -a && ./scripts/feeds install -a        
        chmod +x $GITHUB_WORKSPACE/$DIY_SH && $GITHUB_WORKSPACE/$DIY_SH
        cd package
        chmod +x $GITHUB_WORKSPACE/$PLUGINS_SH && $GITHUB_WORKSPACE/$PLUGINS_SH

    - name: 导入补丁和配置
      run: |
        [ -e files ] && mv files openwrt/files
        cd openwrt
        rm -rf ./tmp* ./.config*
        cat $GITHUB_WORKSPACE/configs/mt7981-21.02-ax3000.txt >> .config
        
    - name: MTK SDK无线控制界面 (不运行则是OP界面，运行则MTK界面)
      if: github.event.inputs.USE_MTWIFI_CFG == 'false'
      run: |
        cd openwrt
        sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
        sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
        sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
        sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config

    - name: 设置 高功率 eeprom
      if: github.event.inputs.Default_eeprom != 'off_false'
      run: |
        cp eeprom/"$Default_eeprom".bin openwrt/package/mtk/drivers/mt_wifi/files/mt7981-default-eeprom/MT7981_iPAiLNA_EEPROM.bin
        cd openwrt
        ## 如果MAC没有修复则单独固定WiFi MAC
        if sed -n '/rax3000m/,/;;/p' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network | grep -q 'lan_mac=$(mmc_get_mac_binary factory 0x24)'; then
        ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
        echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7981.dbdc.b0.dat
        \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7981.dbdc.b1.dat" > temp_insert.txt
        ## 将文本内容写入02_network
        sed -i '/mediatek_setup_macs()/,/\};/ {/cmcc,rax3000m-emmc)/ {n;n;n;r temp_insert.txt
        }}' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network
        fi
        
    - name: 设置 EMMC 使用highspeed
      run: |
        if ! grep -q 'cap-mmc-highspeed' openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts; then
            sed -i -e '/bus-width = <8>;/ a\	cap-mmc-highspeed;' openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts
        fi

    - name: 设置 EMMC 使用52MHz频率
      if: github.event.inputs.USE_52MHZ == 'true'
      run: |
        sed -i 's/max-frequency = <.*>/max-frequency = <52000000>/g' openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts

    - name: 设置 dockerman 容器
      if: github.event.inputs.USE_DOCKER == 'true'
      run: |
        cd openwrt
        echo -e "\nCONFIG_PACKAGE_luci-app-dockerman=y" >> .config
   
    - name: 下载文件
      run: |
        cd openwrt
        chmod +x $GITHUB_WORKSPACE/$CLASH_CORE && $GITHUB_WORKSPACE/$CLASH_CORE
        make defconfig
        make download -j8 V=10
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件中
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 空间使用情况
      if: (!cancelled())
      run: |
        du -h --max-depth=1
        cd openwrt
        echo "======================="
        lscpu | egrep "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="
        
    - name: 上传 bin 目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cp -rf ./openwrt/.config ./openwrt/bin/targets/mediatek/mt7981/Config_"$WRT_SOURCE".txt
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo 
        rm -rf *.json 
        rm -rf *.manifest 
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo "源码：${{ env.REPO_URL }}" >> release.txt
        echo "地址：${{ env.REPO_IP }}" >> release.txt
        wlan_luci_interface=""
        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' openwrt/.config; then
          echo "- 使用 OpenWrt 原生无线控制界面" >> release.txt
          wlan_luci_interface="mtwifi-cfg"
        else
          echo "- 使用 MTK SDK 无线控制界面" >> release.txt
          wlan_luci_interface="luci-app-mtk"
        fi
        eeprom_status=""
        if [[ "${{inputs.Default_eeprom}}" == *"_eeprom" ]]; then
          echo "- eeprom 使用 "$Default_eeprom" 提取版本" >> release.txt
          eeprom_status="$Default_eeprom""_eeprom"
        else
          echo "- eeprom 未修改" >> release.txt
          eeprom_status="default_eeprom"
        fi
        if grep -q 'CONFIG_MTK_MEMORY_SHRINK=y' openwrt/.config; then
          echo "- 使用 MTK_内存优化 推荐256M开启" >> release.txt
        else
          echo "- 关闭 MTK_内存优化 推荐512M关闭" >> release.txt
        fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' openwrt/.config; then
          echo "- 添加 docker容器" >> release.txt
        else
          echo "- 无 docker容器" >> release.txt
        fi
                
        max_frequency=$(($(grep -oP "max-frequency = <\K[0-9]*" openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts) / 1000000))
        echo "- 使用闪存频率: ${max_frequency}MHz" >> release.txt
        release_tag=$(date +"%Y.%m.%d_mt7981-$WRT_SOURCE-cmcc-rax3000m-emmc")
        echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除旧发布的固件
      uses: dev-drprasad/delete-older-releases@v0.2.1
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除过时工作流程
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 1
